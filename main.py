import asyncio
import sys
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from config import BOT_TOKEN
from database import *

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è Windows
if sys.platform == 'win32':
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
storage = MemoryStorage()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=storage)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_menu_client = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='üõ†Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É')],
        [KeyboardButton(text='üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏')],
        [KeyboardButton(text='üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π')]
    ],
    resize_keyboard=True
)

main_menu_worker = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞—è–≤–∫–∏')],
        [KeyboardButton(text='üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏')],
        [KeyboardButton(text='üë§ –ü—Ä–æ—Ñ–∏–ª—å')]
    ],
    resize_keyboard=True
)

main_menu_admin = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏')],
        [KeyboardButton(text='üë∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º–∏')],
        [KeyboardButton(text='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')],
        [KeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞')]
    ],
    resize_keyboard=True
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
class CreateRequest(StatesGroup):
    category = State()
    address = State()
    contact_number = State()
    description = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏ –∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º–∏
class ManageRequests(StatesGroup):
    view_requests = State()
    view_workers = State()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
class AddWorker(StatesGroup):
    user_id = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def delete_previous_messages(chat_id, message_ids):
    for message_id in message_ids:
        try:
            await bot.delete_message(chat_id, message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.update_data(last_messages=[])  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    welcome_text = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ –º–∞—Å—Ç–µ—Ä–æ–≤! üõ†Ô∏è

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–º–æ–Ω—Ç –º–µ–±–µ–ª–∏, —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∏ –∏–ª–∏ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏ —É –≤–∞—Å –¥–æ–º–∞. ü™ëüöøüí°

üìã –ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:
- üõ†Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–º–æ–Ω—Ç
- üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏
- üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É
- üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üõ†Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! ÔøΩ
"""
    await message.answer(welcome_text, reply_markup=ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact=True)]
        ],
        resize_keyboard=True
    ))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(lambda message: message.contact is not None)
async def handle_contact(message: types.Message, state: FSMContext):
    phone = message.contact.phone_number
    user_id = message.from_user.id
    user = get_user_by_user_id(user_id)
    
    if not user:
        add_user(user_id, phone, name=message.from_user.full_name)
        await message.answer("‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç.", reply_markup=main_menu_client)
    else:
        cursor.execute('UPDATE users SET phone = ? WHERE user_id = ?', (phone, user_id))
        conn.commit()
        role = user[3]
        if role == 'client':
            await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∫–ª–∏–µ–Ω—Ç!", reply_markup=main_menu_client)
        elif role == 'worker':
            await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Ä–∞–±–æ—Ç–Ω–∏–∫!", reply_markup=main_menu_worker)
        elif role == 'admin':
            await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω!", reply_markup=main_menu_admin)
    
    await state.update_data(phone=phone, user_id=user_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üõ†Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"
@dp.message(lambda message: message.text == 'üõ†Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É')
async def create_request(message: types.Message, state: FSMContext):
    await message.answer("üõ†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='ü™ë –†–µ–º–æ–Ω—Ç –º–µ–±–µ–ª–∏')],
            [KeyboardButton(text='üöø –°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞')],
            [KeyboardButton(text='üí° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞')],
            [KeyboardButton(text='üîô –ù–∞–∑–∞–¥')]
        ],
        resize_keyboard=True
    ))
    await state.set_state(CreateRequest.category)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞–∑–∞–¥"
@dp.message(lambda message: message.text == 'üîô –ù–∞–∑–∞–¥')
async def back_to_main_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üîô –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_client)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message(CreateRequest.category)
async def process_category(message: types.Message, state: FSMContext):
    if message.text == 'üîô –ù–∞–∑–∞–¥':
        await back_to_main_menu(message, state)
        return
    await state.update_data(category=message.text)
    await state.set_state(CreateRequest.address)
    await message.answer("üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='üîô –ù–∞–∑–∞–¥')]
        ],
        resize_keyboard=True
    ))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞
@dp.message(CreateRequest.address)
async def process_address(message: types.Message, state: FSMContext):
    if message.text == 'üîô –ù–∞–∑–∞–¥':
        await back_to_main_menu(message, state)
        return
    await state.update_data(address=message.text)
    await state.set_state(CreateRequest.contact_number)
    await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='üîô –ù–∞–∑–∞–¥')]
        ],
        resize_keyboard=True
    ))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —Å–≤—è–∑–∏
@dp.message(CreateRequest.contact_number)
async def process_contact_number(message: types.Message, state: FSMContext):
    if message.text == 'üîô –ù–∞–∑–∞–¥':
        await back_to_main_menu(message, state)
        return
    await state.update_data(contact_number=message.text)
    await state.set_state(CreateRequest.description)
    await message.answer("üìù –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É (–º–æ–∂–Ω–æ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–æ—Ç–æ):", reply_markup=ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='üîô –ù–∞–∑–∞–¥')]
        ],
        resize_keyboard=True
    ))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Ñ–æ—Ç–æ
@dp.message(CreateRequest.description)
async def process_description(message: types.Message, state: FSMContext):
    if message.text == 'üîô –ù–∞–∑–∞–¥':
        await back_to_main_menu(message, state)
        return
    
    user_data = await state.get_data()
    description = user_data.get('description', '')
    photo = user_data.get('photo', None)

    if message.text:
        description = message.text

    if message.photo:
        photo = message.photo[-1].file_id

    await state.update_data(description=description, photo=photo)

    if message.photo and not message.caption:
        skip_button = KeyboardButton(text='‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
        await message.answer("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):", reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [skip_button]
            ],
            resize_keyboard=True
        ))
        return

    if message.text == '‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await finish_request(message, state)
        return

    await finish_request(message, state)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
async def finish_request(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_id = message.from_user.id
    user = get_user_by_user_id(user_id)
    
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    
    add_request(
        category=user_data.get('category'),
        description=user_data.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'),
        client_id=user_id
    )
    
    await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=main_menu_client)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏"
@dp.message(lambda message: message.text == 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏')
async def my_requests(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = get_user_by_user_id(user_id)
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.")
        return
    
    requests = get_user_requests(user_id)
    if not requests:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return
    
    for req in requests:
        request_number = f"{str(user_id)[:4]}{10 + req[0]}"
        status = "‚úÖ –ü—Ä–∏–Ω—è—Ç–∞" if req[4] == "in_progress" else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è"
        contact_number = user[1]
        text = f"üõ†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {req[1]}\nüìû –ù–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏: {contact_number}\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {req[2]}\nüìù –°—Ç–∞—Ç—É—Å: {status}"
        
        delete_button = InlineKeyboardButton(text='üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data=f"confirm_delete_{req[0]}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[delete_button]])
        
        await message.answer(text, reply_markup=keyboard)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
@dp.callback_query(lambda c: c.data.startswith('confirm_delete_'))
async def confirm_delete_request(callback_query: types.CallbackQuery, state: FSMContext):
    request_id = callback_query.data.split('_')[2]
    
    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=f"delete_request_{request_id}"),
            InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data=f"cancel_delete_{request_id}")
        ]
    ])
    
    await callback_query.message.edit_reply_markup(reply_markup=confirm_keyboard)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query(lambda c: c.data.startswith('cancel_delete_'))
async def cancel_delete(callback_query: types.CallbackQuery, state: FSMContext):
    request_id = callback_query.data.split('_')[2]
    
    user_id = callback_query.from_user.id
    user = get_user_by_user_id(user_id)
    if not user:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    req = get_request_by_id(request_id)
    if not req:
        await callback_query.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    request_number = f"{str(user_id)[:4]}{10 + req[0]}"
    status = "‚úÖ –ü—Ä–∏–Ω—è—Ç–∞" if req[4] == "in_progress" else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è"
    text = f"üõ†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {req[1]}\nüìû –ù–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏: {req[2]}\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {req[2]}\nüìù –°—Ç–∞—Ç—É—Å: {status}"
    
    delete_button = InlineKeyboardButton(text='üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data=f"confirm_delete_{req[0]}")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[delete_button]])
        
    await callback_query.message.edit_text(text, reply_markup=keyboard)
    await callback_query.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
@dp.callback_query(lambda c: c.data.startswith('delete_request_'))
async def delete_request(callback_query: types.CallbackQuery, state: FSMContext):
    request_id = callback_query.data.split('_')[2]
    
    cursor.execute('UPDATE requests SET is_deleted = 1 WHERE id = ?', (request_id,))
    conn.commit()
    
    await callback_query.message.delete()
    await callback_query.answer("üóëÔ∏è –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏" (–¥–ª—è –∞–¥–º–∏–Ω–∞)
@dp.message(lambda message: message.text == 'üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏')
async def admin_manage_requests(message: types.Message, state: FSMContext):
    user = get_user_by_user_id(message.from_user.id)
    if not user or user[3] != 'admin':
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏', callback_data='view_active_requests_0')],
        [InlineKeyboardButton(text='–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏', callback_data='view_inactive_requests_0')],
        [InlineKeyboardButton(text='–£–¥–∞–ª–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏', callback_data='view_deleted_requests_0')],
        [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_to_admin_menu')]
    ])
    
    await message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—è–≤–æ–∫:", reply_markup=keyboard)
    await state.set_state(ManageRequests.view_requests)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫
@dp.callback_query(lambda c: c.data.startswith('view_') and ManageRequests.view_requests)
async def view_requests(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data.split('_')
    category = data[1]
    offset = int(data[3])
    
    if category == 'active':
        requests = get_all_requests(include_deleted=False)
    elif category == 'inactive':
        requests = get_all_requests(include_deleted=False)
    else:
        requests = get_all_requests(include_deleted=True)
    
    requests_to_show = requests[offset:offset+5]
    
    if not requests_to_show:
        await callback_query.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_data = await state.get_data()
    last_messages = user_data.get('last_messages', [])
    await delete_previous_messages(callback_query.message.chat.id, last_messages)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    new_messages = []
    for req in requests_to_show:
        status = "‚úÖ –ü—Ä–∏–Ω—è—Ç–∞" if req[4] == "in_progress" else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è"
        text = f"üõ†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {req[1]}\nüìû –ù–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏: {req[2]}\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {req[2]}\nüìù –°—Ç–∞—Ç—É—Å: {status}"
        
        delete_button = InlineKeyboardButton(text='üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', callback_data=f"delete_request_{req[0]}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[delete_button]])
        
        sent_message = await callback_query.message.answer(text, reply_markup=keyboard)
        new_messages.append(sent_message.message_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await state.update_data(last_messages=new_messages)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if offset > 0:
        nav_buttons.append(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f"view_{category}_requests_{offset-5}"))
    if offset + 5 < len(requests):
        nav_buttons.append(InlineKeyboardButton(text='–î–∞–ª–µ–µ ‚û°Ô∏è', callback_data=f"view_{category}_requests_{offset+5}"))
    
    if nav_buttons:
        nav_keyboard = InlineKeyboardMarkup(inline_keyboard=[nav_buttons])
        sent_message = await callback_query.message.answer("–ù–∞–≤–∏–≥–∞—Ü–∏—è:", reply_markup=nav_keyboard)
        new_messages.append(sent_message.message_id)
    
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üë∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º–∏"
@dp.message(lambda message: message.text == 'üë∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º–∏')
async def admin_manage_workers(message: types.Message, state: FSMContext):
    user = get_user_by_user_id(message.from_user.id)
    if not user or user[3] != 'admin':
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    workers = get_all_workers()
    if not workers:
        await message.answer("üë∑ –ù–µ—Ç —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤.")
        return
    
    workers_to_show = workers[:5]
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_data = await state.get_data()
    last_messages = user_data.get('last_messages', [])
    await delete_previous_messages(message.chat.id, last_messages)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    new_messages = []
    for worker in workers_to_show:
        text = f"üë∑ ID: {worker[0]}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {worker[1]}\nüë§ –ò–º—è: {worker[2]}"
        
        delete_button = InlineKeyboardButton(text='üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', callback_data=f"delete_worker_{worker[0]}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[delete_button]])
        
        sent_message = await message.answer(text, reply_markup=keyboard)
        new_messages.append(sent_message.message_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await state.update_data(last_messages=new_messages)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if len(workers) > 5:
        nav_buttons.append(InlineKeyboardButton(text='–î–∞–ª–µ–µ ‚û°Ô∏è', callback_data='view_workers_5'))
    
    if nav_buttons:
        nav_keyboard = InlineKeyboardMarkup(inline_keyboard=[nav_buttons])
        sent_message = await message.answer("–ù–∞–≤–∏–≥–∞—Ü–∏—è:", reply_markup=nav_keyboard)
        new_messages.append(sent_message.message_id)
    
    await state.set_state(ManageRequests.view_workers)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º
@dp.callback_query(lambda c: c.data.startswith('view_workers_') and ManageRequests.view_workers)
async def view_workers(callback_query: types.CallbackQuery, state: FSMContext):
    offset = int(callback_query.data.split('_')[2])
    workers = get_all_workers()
    
    workers_to_show = workers[offset:offset+5]
    
    if not workers_to_show:
        await callback_query.answer("–ù–µ—Ç —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_data = await state.get_data()
    last_messages = user_data.get('last_messages', [])
    await delete_previous_messages(callback_query.message.chat.id, last_messages)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    new_messages = []
    for worker in workers_to_show:
        text = f"üë∑ ID: {worker[0]}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {worker[1]}\nüë§ –ò–º—è: {worker[2]}"
        
        delete_button = InlineKeyboardButton(text='üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', callback_data=f"delete_worker_{worker[0]}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[delete_button]])
        
        sent_message = await callback_query.message.answer(text, reply_markup=keyboard)
        new_messages.append(sent_message.message_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await state.update_data(last_messages=new_messages)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if offset > 0:
        nav_buttons.append(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f"view_workers_{offset-5}"))
    if offset + 5 < len(workers):
        nav_buttons.append(InlineKeyboardButton(text='–î–∞–ª–µ–µ ‚û°Ô∏è', callback_data=f"view_workers_{offset+5}"))
    
    if nav_buttons:
        nav_keyboard = InlineKeyboardMarkup(inline_keyboard=[nav_buttons])
        sent_message = await callback_query.message.answer("–ù–∞–≤–∏–≥–∞—Ü–∏—è:", reply_markup=nav_keyboard)
        new_messages.append(sent_message.message_id)
    
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@dp.message(lambda message: message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def admin_statistics(message: types.Message, state: FSMContext):
    user = get_user_by_user_id(message.from_user.id)
    if not user or user[3] != 'admin':
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    requests = get_all_requests(include_deleted=True)
    active_requests = [req for req in requests if req[6] == 0]
    inactive_requests = [req for req in requests if req[6] == 1]
    in_progress_requests = [req for req in requests if req[4] == "in_progress"]
    
    text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞—è–≤–∫–∞–º:
üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏: {len(active_requests)}
üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏: {len(inactive_requests)}
üü° –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {len(in_progress_requests)}
"""
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_data = await state.get_data()
    last_messages = user_data.get('last_messages', [])
    await delete_previous_messages(message.chat.id, last_messages)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    sent_message = await message.answer(text)
    await state.update_data(last_messages=[sent_message.message_id])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞–∑–∞–¥" –≤ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏
@dp.callback_query(lambda c: c.data == 'back_to_admin_menu')
async def back_to_admin_menu(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.message.answer("üîô –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_admin)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞"
@dp.message(lambda message: message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞')
async def add_worker_command(message: types.Message, state: FSMContext):
    user = get_user_by_user_id(message.from_user.id)
    if not user or user[3] != 'admin':
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ user_id –Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞:")
    await state.set_state(AddWorker.user_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ user_id
@dp.message(AddWorker.user_id)
async def process_user_id(message: types.Message, state: FSMContext):
    user_id = message.text
    if not user_id.isdigit():
        await message.answer("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    add_worker(int(user_id))
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å user_id {user_id} —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–Ω–∏–∫!", reply_markup=main_menu_admin)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
@dp.callback_query(lambda c: c.data.startswith('delete_worker_'))
async def delete_worker(callback_query: types.CallbackQuery, state: FSMContext):
    worker_id = callback_query.data.split('_')[2]
    
    demote_worker_to_client(worker_id)
    await callback_query.message.delete()
    await callback_query.answer("üë∑ –†–∞–±–æ—Ç–Ω–∏–∫ –ø–æ–Ω–∏–∂–µ–Ω –¥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞—è–≤–∫–∏" (–¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞)
@dp.message(lambda message: message.text == 'üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞—è–≤–∫–∏')
async def show_available_requests(message: types.Message):
    user_id = message.from_user.id
    user = get_user_by_user_id(user_id)
    
    if not user or user[3] != 'worker':
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    requests = get_available_requests()
    
    if not requests:
        await message.answer("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return
    
    for req in requests:
        request_number = f"{str(user_id)[:4]}{10 + req[0]}"
        text = f"üõ†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {req[1]}\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {req[2]}\nüìù –°—Ç–∞—Ç—É—Å: {req[4]}"
        
        take_button = InlineKeyboardButton(text='‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É', callback_data=f"take_request_{req[0]}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[take_button]])
        
        await message.answer(text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏ (–¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞)
@dp.callback_query(lambda c: c.data.startswith('take_request_'))
async def take_request(callback_query: types.CallbackQuery):
    request_id = callback_query.data.split('_')[2]
    worker_id = callback_query.from_user.id
    
    take_request(request_id, worker_id)
    
    await callback_query.message.edit_text("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")
    await callback_query.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    asyncio.run(dp.start_polling(bot))